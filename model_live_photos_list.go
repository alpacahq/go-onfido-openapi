/*
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * API version: 3.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// LivePhotosList struct for LivePhotosList
type LivePhotosList struct {
	LivePhotos *[]LivePhoto `json:"live_photos,omitempty"`
}

// NewLivePhotosList instantiates a new LivePhotosList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLivePhotosList() *LivePhotosList {
	this := LivePhotosList{}
	return &this
}

// NewLivePhotosListWithDefaults instantiates a new LivePhotosList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLivePhotosListWithDefaults() *LivePhotosList {
	this := LivePhotosList{}
	return &this
}

// GetLivePhotos returns the LivePhotos field value if set, zero value otherwise.
func (o *LivePhotosList) GetLivePhotos() []LivePhoto {
	if o == nil || o.LivePhotos == nil {
		var ret []LivePhoto
		return ret
	}
	return *o.LivePhotos
}

// GetLivePhotosOk returns a tuple with the LivePhotos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LivePhotosList) GetLivePhotosOk() (*[]LivePhoto, bool) {
	if o == nil || o.LivePhotos == nil {
		return nil, false
	}
	return o.LivePhotos, true
}

// HasLivePhotos returns a boolean if a field has been set.
func (o *LivePhotosList) HasLivePhotos() bool {
	if o != nil && o.LivePhotos != nil {
		return true
	}

	return false
}

// SetLivePhotos gets a reference to the given []LivePhoto and assigns it to the LivePhotos field.
func (o *LivePhotosList) SetLivePhotos(v []LivePhoto) {
	o.LivePhotos = &v
}

func (o LivePhotosList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LivePhotos != nil {
		toSerialize["live_photos"] = o.LivePhotos
	}
	return json.Marshal(toSerialize)
}

type NullableLivePhotosList struct {
	value *LivePhotosList
	isSet bool
}

func (v NullableLivePhotosList) Get() *LivePhotosList {
	return v.value
}

func (v *NullableLivePhotosList) Set(val *LivePhotosList) {
	v.value = val
	v.isSet = true
}

func (v NullableLivePhotosList) IsSet() bool {
	return v.isSet
}

func (v *NullableLivePhotosList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLivePhotosList(val *LivePhotosList) *NullableLivePhotosList {
	return &NullableLivePhotosList{value: val, isSet: true}
}

func (v NullableLivePhotosList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLivePhotosList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


