/*
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * API version: 3.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// Address struct for Address
type Address struct {
	// The flat number of this address
	FlatNumber *string `json:"flat_number,omitempty"`
	// The building number of this address
	BuildingNumber *string `json:"building_number,omitempty"`
	// The building name of this address
	BuildingName *string `json:"building_name,omitempty"`
	// The street of the applicant’s address
	Street *string `json:"street,omitempty"`
	// The sub-street of the applicant’s address
	SubStreet *string `json:"sub_street,omitempty"`
	// The town of the applicant’s address
	Town *string `json:"town,omitempty"`
	// The postcode or ZIP of the applicant’s address
	Postcode *string `json:"postcode,omitempty"`
	// The 3 character ISO country code of this address. For example, GBR is the country code for the United Kingdom
	Country *string `json:"country,omitempty"`
	// The address state. US states must use the USPS abbreviation (see also ISO 3166-2:US), for example AK, CA, or TX.
	State *string `json:"state,omitempty"`
	// Line 1 of the applicant's address
	Line1 *string `json:"line1,omitempty"`
	// Line 2 of the applicant's address
	Line2 *string `json:"line2,omitempty"`
	// Line 3 of the applicant's address
	Line3 *string `json:"line3,omitempty"`
}

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress() *Address {
	this := Address{}
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetFlatNumber returns the FlatNumber field value if set, zero value otherwise.
func (o *Address) GetFlatNumber() string {
	if o == nil || o.FlatNumber == nil {
		var ret string
		return ret
	}
	return *o.FlatNumber
}

// GetFlatNumberOk returns a tuple with the FlatNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetFlatNumberOk() (*string, bool) {
	if o == nil || o.FlatNumber == nil {
		return nil, false
	}
	return o.FlatNumber, true
}

// HasFlatNumber returns a boolean if a field has been set.
func (o *Address) HasFlatNumber() bool {
	if o != nil && o.FlatNumber != nil {
		return true
	}

	return false
}

// SetFlatNumber gets a reference to the given string and assigns it to the FlatNumber field.
func (o *Address) SetFlatNumber(v string) {
	o.FlatNumber = &v
}

// GetBuildingNumber returns the BuildingNumber field value if set, zero value otherwise.
func (o *Address) GetBuildingNumber() string {
	if o == nil || o.BuildingNumber == nil {
		var ret string
		return ret
	}
	return *o.BuildingNumber
}

// GetBuildingNumberOk returns a tuple with the BuildingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBuildingNumberOk() (*string, bool) {
	if o == nil || o.BuildingNumber == nil {
		return nil, false
	}
	return o.BuildingNumber, true
}

// HasBuildingNumber returns a boolean if a field has been set.
func (o *Address) HasBuildingNumber() bool {
	if o != nil && o.BuildingNumber != nil {
		return true
	}

	return false
}

// SetBuildingNumber gets a reference to the given string and assigns it to the BuildingNumber field.
func (o *Address) SetBuildingNumber(v string) {
	o.BuildingNumber = &v
}

// GetBuildingName returns the BuildingName field value if set, zero value otherwise.
func (o *Address) GetBuildingName() string {
	if o == nil || o.BuildingName == nil {
		var ret string
		return ret
	}
	return *o.BuildingName
}

// GetBuildingNameOk returns a tuple with the BuildingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBuildingNameOk() (*string, bool) {
	if o == nil || o.BuildingName == nil {
		return nil, false
	}
	return o.BuildingName, true
}

// HasBuildingName returns a boolean if a field has been set.
func (o *Address) HasBuildingName() bool {
	if o != nil && o.BuildingName != nil {
		return true
	}

	return false
}

// SetBuildingName gets a reference to the given string and assigns it to the BuildingName field.
func (o *Address) SetBuildingName(v string) {
	o.BuildingName = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *Address) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *Address) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *Address) SetStreet(v string) {
	o.Street = &v
}

// GetSubStreet returns the SubStreet field value if set, zero value otherwise.
func (o *Address) GetSubStreet() string {
	if o == nil || o.SubStreet == nil {
		var ret string
		return ret
	}
	return *o.SubStreet
}

// GetSubStreetOk returns a tuple with the SubStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetSubStreetOk() (*string, bool) {
	if o == nil || o.SubStreet == nil {
		return nil, false
	}
	return o.SubStreet, true
}

// HasSubStreet returns a boolean if a field has been set.
func (o *Address) HasSubStreet() bool {
	if o != nil && o.SubStreet != nil {
		return true
	}

	return false
}

// SetSubStreet gets a reference to the given string and assigns it to the SubStreet field.
func (o *Address) SetSubStreet(v string) {
	o.SubStreet = &v
}

// GetTown returns the Town field value if set, zero value otherwise.
func (o *Address) GetTown() string {
	if o == nil || o.Town == nil {
		var ret string
		return ret
	}
	return *o.Town
}

// GetTownOk returns a tuple with the Town field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetTownOk() (*string, bool) {
	if o == nil || o.Town == nil {
		return nil, false
	}
	return o.Town, true
}

// HasTown returns a boolean if a field has been set.
func (o *Address) HasTown() bool {
	if o != nil && o.Town != nil {
		return true
	}

	return false
}

// SetTown gets a reference to the given string and assigns it to the Town field.
func (o *Address) SetTown(v string) {
	o.Town = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *Address) GetPostcode() string {
	if o == nil || o.Postcode == nil {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostcodeOk() (*string, bool) {
	if o == nil || o.Postcode == nil {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *Address) HasPostcode() bool {
	if o != nil && o.Postcode != nil {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *Address) SetPostcode(v string) {
	o.Postcode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Address) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Address) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Address) SetCountry(v string) {
	o.Country = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Address) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Address) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Address) SetState(v string) {
	o.State = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *Address) GetLine1() string {
	if o == nil || o.Line1 == nil {
		var ret string
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLine1Ok() (*string, bool) {
	if o == nil || o.Line1 == nil {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *Address) HasLine1() bool {
	if o != nil && o.Line1 != nil {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given string and assigns it to the Line1 field.
func (o *Address) SetLine1(v string) {
	o.Line1 = &v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *Address) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *Address) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *Address) SetLine2(v string) {
	o.Line2 = &v
}

// GetLine3 returns the Line3 field value if set, zero value otherwise.
func (o *Address) GetLine3() string {
	if o == nil || o.Line3 == nil {
		var ret string
		return ret
	}
	return *o.Line3
}

// GetLine3Ok returns a tuple with the Line3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLine3Ok() (*string, bool) {
	if o == nil || o.Line3 == nil {
		return nil, false
	}
	return o.Line3, true
}

// HasLine3 returns a boolean if a field has been set.
func (o *Address) HasLine3() bool {
	if o != nil && o.Line3 != nil {
		return true
	}

	return false
}

// SetLine3 gets a reference to the given string and assigns it to the Line3 field.
func (o *Address) SetLine3(v string) {
	o.Line3 = &v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlatNumber != nil {
		toSerialize["flat_number"] = o.FlatNumber
	}
	if o.BuildingNumber != nil {
		toSerialize["building_number"] = o.BuildingNumber
	}
	if o.BuildingName != nil {
		toSerialize["building_name"] = o.BuildingName
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.SubStreet != nil {
		toSerialize["sub_street"] = o.SubStreet
	}
	if o.Town != nil {
		toSerialize["town"] = o.Town
	}
	if o.Postcode != nil {
		toSerialize["postcode"] = o.Postcode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Line1 != nil {
		toSerialize["line1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["line2"] = o.Line2
	}
	if o.Line3 != nil {
		toSerialize["line3"] = o.Line3
	}
	return json.Marshal(toSerialize)
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


