/*
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * API version: 3.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// WebhooksList struct for WebhooksList
type WebhooksList struct {
	Webhooks *[]Webhook `json:"webhooks,omitempty"`
}

// NewWebhooksList instantiates a new WebhooksList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhooksList() *WebhooksList {
	this := WebhooksList{}
	return &this
}

// NewWebhooksListWithDefaults instantiates a new WebhooksList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhooksListWithDefaults() *WebhooksList {
	this := WebhooksList{}
	return &this
}

// GetWebhooks returns the Webhooks field value if set, zero value otherwise.
func (o *WebhooksList) GetWebhooks() []Webhook {
	if o == nil || o.Webhooks == nil {
		var ret []Webhook
		return ret
	}
	return *o.Webhooks
}

// GetWebhooksOk returns a tuple with the Webhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhooksList) GetWebhooksOk() (*[]Webhook, bool) {
	if o == nil || o.Webhooks == nil {
		return nil, false
	}
	return o.Webhooks, true
}

// HasWebhooks returns a boolean if a field has been set.
func (o *WebhooksList) HasWebhooks() bool {
	if o != nil && o.Webhooks != nil {
		return true
	}

	return false
}

// SetWebhooks gets a reference to the given []Webhook and assigns it to the Webhooks field.
func (o *WebhooksList) SetWebhooks(v []Webhook) {
	o.Webhooks = &v
}

func (o WebhooksList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Webhooks != nil {
		toSerialize["webhooks"] = o.Webhooks
	}
	return json.Marshal(toSerialize)
}

type NullableWebhooksList struct {
	value *WebhooksList
	isSet bool
}

func (v NullableWebhooksList) Get() *WebhooksList {
	return v.value
}

func (v *NullableWebhooksList) Set(val *WebhooksList) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhooksList) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhooksList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhooksList(val *WebhooksList) *NullableWebhooksList {
	return &NullableWebhooksList{value: val, isSet: true}
}

func (v NullableWebhooksList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhooksList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


